name: build-rust-x86_64-pc-windows-gnu-self-hosted-dispatch

on:
  workflow_dispatch:
    inputs:
      upload_artifacts:
        description: "Upload final artifacts to Release?"
        required: true
        default: "yes"
      rust_build_branch:
        description: "Branch of rust-build to use"
        required: true
        default: "build/1.71.0.1"
      release_version:
        description: "Release Version for generation"
        required: true
        default: '1.71.0.1'
      rust_version:
        description: "Version of esp rust to use"
        required: true
        default: "nightly"
      rust_target:
        description: "Target triple"
        required: true
        default: "x86_64-pc-windows-gnu"
      shutdown_vm:
        description: "Shut down VM after finishing the build"
        required: true
        default: "no"
      release_tag:
        description: "Tag used for uploading (e.g. v1.71.0.1, untagged-00000)"
        required: true
        default: "untagged-06704172812884cde852"

jobs:
  get_release:
    # https://github.com/octokit/request-action
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
      - uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/{owner}/{repo}/releases/tags/${{ github.event.inputs.release_tag }}
          owner: esp-rs
          repo: rust-build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get upload url
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env:
          response: ${{ steps.get_release.outputs.data }}

  build-idf-rust:
    name: Build IDF Rust for ${{ matrix.os }}
    needs: get_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [x86_64-pc-windows-gnu-self-hosted]
        include:
          - os: x86_64-pc-windows-gnu-self-hosted
            ASSET_PATH: "rust/build/dist/rust-${{ github.event.inputs.release_version }}-${{ github.event.inputs.rust_target }}.zip"
            ASSET_NAME: "rust-${{ github.event.inputs.release_version }}-${{ github.event.inputs.rust_target }}.zip"
            ASSET_CONTENT_TYPE: "application/x-tar"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Checkout repository - esp-rs/rust
        uses: actions/checkout@v2
        with:
          path: rust
          repository: esp-rs/rust
          ref: esp-${{ github.event.inputs.release_version }}
          submodules: true
      - name: Unmount local drive
        id: unount_path_before
        continue-on-error: true
        run: subst "R:" /D
      - name: Map local long path to new drive
        id: map_path
        shell: powershell
        run: subst "R:" "$env:GITHUB_WORKSPACE\rust"
      - name: Prepare build
        working-directory: "R:"
        run: |
          C:\msys64\usr\bin\env.exe MSYSTEM=MINGW64 /usr/bin/bash -lc "cd /r; python3 src/bootstrap/configure.py --experimental-targets=Xtensa --release-channel=nightly --release-description='${{ github.event.inputs.release_version }}' --enable-extended --tools=clippy,cargo,rustfmt,rust-analyzer-proc-macro-srv --dist-compression-formats='xz' --enable-lld"
      - name: Build with x.py - dist packages
        id: build-rust
        working-directory: "R:"
        continue-on-error: true
        run: C:\msys64\usr\bin\env.exe MSYSTEM=MINGW64 /usr/bin/bash -lc "cd /r; python3 x.py dist --stage 2"
      # This step make sense only on Azure runners with 8 cores and 16 GB RAM,
      # because LLVM OOMs. Either increase memory or decrease number of parallel processes.
      #- name: Retry build with x.py - dist packages - in case of failure on LLVM OOM
      #  id: retry-build-rust
      #  if: steps.build-rust.outcome == 'failure'
      #  working-directory: "R:"
      #  continue-on-error: true
      #  run: C:\msys64\usr\bin\env.exe MSYSTEM=MINGW64 /usr/bin/bash -lc "cd /r; python3 x.py dist --stage 2"
      - name: Repackage binary
        id: repackage-binary
        continue-on-error: true
        shell: powershell
        working-directory: "R:/build/dist"
        run: |
          &"$env:GITHUB_WORKSPACE/support/rust-build/Repackage-RustRelease.ps1" -DefaultHost x86_64-pc-windows-gnu
      - name: Upload Release Asset
        if: github.event.inputs.upload_artifacts == 'yes' && steps.repackage-binary.outcome != 'failure'
        id: upload-release-asset
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release.outputs.upload_url }}
          asset_path: ${{ matrix.ASSET_PATH }}
          asset_name: ${{ matrix.ASSET_NAME }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
      - name: Unmount local drive
        id: unount_path
        continue-on-error: true
        run: subst "R:" /D
      - name: Shut down
        if: github.event.inputs.shutdown_vm == 'yes'
        run: shutdown /s /f /t 30
      - name: Fail if build failed
        if: steps.repackage-binary.outcome == 'failure'
        run: exit 1
