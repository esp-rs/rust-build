name: Test macOS M1 self-hosted - build of Rust examples

on:
  workflow_dispatch:
    inputs:
      rust_build_branch:
        description: "Branch with test scripts"
        required: true
        default: "main"
      toolchain_version:
        description: "Version of Rust IDF toolchain"
        required: true
        default: "1.65.0.1"
      target:
        description: "Target to build (e.g. xtensa-esp32-espidf)"
        required: true
        default: "all"

jobs:
  get_release:
    # https://github.com/octokit/request-action
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/{owner}/{repo}/releases/latest
          owner: esp-rs
          repo: rust-build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get upload url
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env:
          response: ${{ steps.get_latest_release.outputs.data }}

  build-idf-rust-examples:
    name: Build IDF Rust Examples for ${{ matrix.os }}
    needs: get_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-m1-self-hosted]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.rust_build_branch }}
      - name: Set up Python
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Setup Ninja
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Test Rust toolchain by compiling STD demo
        run: |
          ./test-rust-toolchain.sh --toolchain-version ${{ github.event.inputs.toolchain_version }} --target ${{ github.event.inputs.target }} --clear-cache YES
      # - name: Prepare artifact for upload
      #   working-directory: rust-esp32-std-demo/target/xtensa-esp32-espidf/debug/
      #   run: zip ../../../../rust-esp32-std-demo-xtensa-esp32-espidf.zip rust-esp32-std-demo
      # - name: Prepare artifact for upload
      #   working-directory: rust-esp32-std-demo/target/xtensa-esp32s2-espidf/debug/
      #   run: zip ../../../../rust-esp32-std-demo-xtensa-esp32s2-espidf.zip rust-esp32-std-demo
      # - name: Prepare artifact for upload
      #   working-directory: rust-esp32-std-demo/target/riscv32imc-esp-espidf/debug/
      #   run: zip ../../../../rust-esp32-std-demo-riscv32imc-esp-espidf.zip rust-esp32-std-demo
      # - name: Upload Release Asset
      #   id: upload-release-asset-esp32
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.get_release.outputs.upload_url }}
      #     asset_path: rust-esp32-std-demo-xtensa-esp32-espidf.zip
      #     asset_name: rust-esp32-std-demo-xtensa-esp32-espidf.zip
      #     asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
      # - name: Upload Release Asset
      #   id: upload-release-asset-esp32s2
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.get_release.outputs.upload_url }}
      #     asset_path: rust-esp32-std-demo-xtensa-esp32s2-espidf.zip
      #     asset_name: rust-esp32-std-demo-xtensa-esp32s2-espidf.zip
      #     asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
      # - name: Upload Release Asset
      #   id: upload-release-asset-esp32c3
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.get_release.outputs.upload_url }}
      #     asset_path: rust-esp32-std-demo-riscv32imc-esp-espidf.zip
      #     asset_name: rust-esp32-std-demo-riscv32imc-esp-espidf.zip
      #     asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
