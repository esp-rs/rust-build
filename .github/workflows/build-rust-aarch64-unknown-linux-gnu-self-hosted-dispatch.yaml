name: build-rust-aarch64-linux-dispatch

on:
  workflow_dispatch:
    inputs:
      upload_artifacts:
        description: "Upload final artifacts to Release?"
        required: true
        default: "yes"
      rust_build_branch:
        description: "Branch of rust-build to use"
        required: true
        default: "build/1.69.0.1"
      release_version:
        description: "Release Version for generation"
        required: true
        default: '1.69.0.1'
      rust_version:
        description: "Version of esp rust to use"
        required: true
        default: "nightly"
      rust_target:
        description: "Target triple"
        required: true
        default: "aarch64-unknown-linux-gnu"
      release_tag:
        description: "Tag used for uploading (e.g. v1.69.0.1, untagged-00000)"
        required: true
        default: "untagged-06704172812884cde852"

jobs:
  get_release:
    # https://github.com/octokit/request-action
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
      - uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/{owner}/{repo}/releases/tags/${{ github.event.inputs.release_tag }}
          owner: esp-rs
          repo: rust-build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get upload url
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env:
          response: ${{ steps.get_release.outputs.data }}

  build-idf-rust:
    name: Build IDF Rust for ${{ matrix.os }}
    # needs: create_release
    needs: get_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-m1-self-hosted]
        include:
          - os: macos-m1-self-hosted
            ASSET_PATH: "build/dist/rust-${{ github.event.inputs.rust_version }}-${{ github.event.inputs.rust_target }}.tar.xz"
            ASSET_NAME: "rust-${{ github.event.inputs.release_version }}-${{ github.event.inputs.rust_target }}.tar.xz"
            ASSET_CONTENT_TYPE: "application/x-tar"
    steps:
      - name: Initialize Podman
        run: |
          podman ps >/dev/null 2>/dev/null || podman machine start
          podman stop rust-linux || echo "ok"
          podman container rm rust-linux || echo "Container name rust-linux is available"
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build construction container
        run: |
          cd support/rust-build/${{ github.event.inputs.rust_target }}
          podman build -t ubuntu-builder  .
      - name: Build Rust
        run: |
          podman run -e RELEASE_DESCRIPTION='${{ github.event.inputs.release_version }}' --name rust-linux ubuntu-builder ./build.sh
          mkdir -p build
          podman cp rust-linux:rust/build/dist build/dist
      - name: Upload Release Asset
        if: github.event.inputs.upload_artifacts == 'yes'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release.outputs.upload_url }}
          asset_path: ${{ matrix.ASSET_PATH }}
          asset_name: ${{ matrix.ASSET_NAME }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
      - name: Clean up
        run: |
          podman container rm rust-linux
          podman machine stop
          rm -rf build
