
name: build-rust-windows-x86_64-self-hosted-dispatch

on:
  workflow_dispatch:
    inputs:
      upload_artifacts:
        description: 'Upload final artifacts to Release?'
        required: true
        default: 'yes'
      rust_build_branch:
        description: 'Branch of rust-build to use'
        required: true
        default: 'main'
      release_version:
        description: 'Release Version for generation'
        required: true
        default: '1.62.0.0'
      rust_version:
        description: 'Version of esp rust to use'
        required: true
        default: 'nightly'
      rust_target:
        description: 'Target triple'
        required: true
        default: 'x86_64-pc-windows-msvc'

jobs:
  get_release:
    # https://github.com/octokit/request-action
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
    - uses: octokit/request-action@v2.x
      id: get_release
      with:
        route: GET /repos/{owner}/{repo}/releases/tags/v${{ github.event.inputs.release_version }}
        owner: esp-rs
        repo: rust-build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: get upload url
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo "::set-output name=url::$url"
      env:
        response:  ${{ steps.get_release.outputs.data }}

  build-idf-rust:
    name: Build IDF Rust for ${{ matrix.os }}
    # needs: create_release
    needs: get_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-x86_64-self-hosted ]
        include:
        - os: windows-x86_64-self-hosted
          ASSET_PATH: 'rust/build/dist/rust-${{ github.event.inputs.release_version }}-${{ github.event.inputs.rust_target }}.zip'
          ASSET_NAME: 'rust-${{ github.event.inputs.release_version }}-${{ github.event.inputs.rust_target }}.zip'
          ASSET_CONTENT_TYPE: 'application/x-tar'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Checkout repository - esp-rs/rust
        uses: actions/checkout@v2
        with:
          path: rust
          repository: esp-rs/rust
          ref: esp-${{ github.event.inputs.release_version }}
          submodules: true
      - name: Unmount local drive
        id: unount_path_before
        continue-on-error: true
        run: subst "R:" /D
      - name: Map local long path to new drive
        id: map_path
        shell: pwsh
        run: subst "R:" "$env:GITHUB_WORKSPACE\rust"
      - name: Prepare build
        working-directory: "R:"
        run: |
          python3 src/bootstrap/configure.py --experimental-targets=Xtensa --release-channel=nightly --enable-extended --tools=clippy,cargo,rustfmt --dist-compression-formats='xz'
      - name: Build with x.py - dist packages
        working-directory: "R:"
        continue-on-error: true
        run: python3 x.py dist --stage 2
      - name: Repackage binary
        shell: pwsh
        working-directory: "R:/build/dist"
        run: |
          &"$env:GITHUB_WORKSPACE/support/rust-build/Repackage-RustRelease.ps1"
      - name: Upload Release Asset
        if: github.event.inputs.upload_artifacts == 'yes'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release.outputs.upload_url }}
          asset_path: ${{ matrix.ASSET_PATH }}
          asset_name: ${{ matrix.ASSET_NAME }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
      - name: Unmount local drive
        id: unount_path
        continue-on-error: true
        run: subst "R:" /D

