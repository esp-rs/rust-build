name: Test installer by building template projects

env:
  xtensa-toolchain-version: '1.62.1.0'

on:
  push:
    paths:
      - "install-rust-toolchain.sh"
      - ".github/workflows/installer-check.yaml"
  pull_request:
    paths:
      - "install-rust-toolchain.sh"
      - ".github/workflows/installer-check.yaml"
  workflow_dispatch:

jobs:
  esp-idf-v4-4:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        board: ["esp32", "esp32s3", "esp32s3", "esp32c3"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.rust-build-branch }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
      - name: Install toolchain
        run: |
          ./install-rust-toolchain.sh \
          --extra-crates "ldproxy cargo-generate" \
          --build-target "${{ matrix.board }}" \
          --esp-idf-version "release/v4.4" \
          --minified-esp-idf "YES" \
          --export-file  "${HOME}/export-esp.sh"
      - name: Build template project
        run: |
          source ${HOME}/export-esp.sh
          cargo generate --git https://github.com/esp-rs/esp-idf-template cargo --name test-${{ matrix.board }} --vcs none --silent -d mcu=${{ matrix.board }} -d std=true -d espidfver=v4.4 -d devcontainer=false
          cd test-${{ matrix.board }}
          cargo build
  # esp-idf-master:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       board: ['esp32', 'esp32s3', 'esp32s3', 'esp32c3']
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.event.inputs.rust-build-branch }}
  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install ninja-build
  #     - name: Install toolchain
  #       run: |
  #         ./install-rust-toolchain.sh \
  #         --extra-crates "ldproxy cargo-generate" \
  #         --build-target "${{ matrix.board }}" \
  #         --esp-idf-version "master" \
  #         --minified-esp-idf "YES" \
  #         --export-file  "${HOME}/export-esp.sh"
  #     - name: Build template project
  #       run: |
  #         source ${HOME}/export-esp.sh
  #         cargo generate --git https://github.com/esp-rs/esp-idf-template cargo --name test-${{ matrix.board }} --vcs none --silent -d mcu=${{ matrix.board }} -d std=true -d espidfver=mainline -d devcontainer=false
  #         cd test-${{ matrix.board }}
  #         cargo build
  bare-metal:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        board: ["esp32", "esp32s3", "esp32s3", "esp32c3"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.rust-build-branch }}
      - name: Install toolchain
        run: |
          ./install-rust-toolchain.sh \
          --extra-crates "ldproxy cargo-generate" \
          --build-target "${{ matrix.board }}" \
          --export-file  "${HOME}/export-esp.sh"
      - name: Build template project
        run: |
          source ${HOME}/export-esp.sh
          cargo generate --git https://github.com/esp-rs/esp-template --name test-${{ matrix.board }} --vcs none --silent -d mcu=${{ matrix.board }} -d devcontainer=false
          cd test-${{ matrix.board }}
          cargo build
  crate-check:
    if: github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        extra-crates: ["", "ldproxy", "espflash cargo-espflash ldproxy cargo-generate wokwi-server web-flash"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.rust-build-branch }}
      - name: Install toolchain
        run: ./install-rust-toolchain.sh --extra-crates "${{ matrix.extra-crates }}"
  minified-llvm:
    if: github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        minified-llvm: ["YES", "NO"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.rust-build-branch }}
      - name: Install toolchain
        run: |
          ./install-rust-toolchain.sh \
          --minified-llvm "${{ matrix.minified-llvm }}"
  installation-modes:
    if: github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install toolchain
        run: |
          ./install-rust-toolchain.sh --installation-mode "install"
      - name: Reinstall toolchain
        run: |
          ./install-rust-toolchain.sh --installation-mode "reinstall"
      - name: Uninstall toolchain
        run: |
          ./install-rust-toolchain.sh --installation-mode "uninstall"
  test-arguments:
    if: github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        arguments: ["", "--toolchain-version $xtensa-toolchain-version --export-file export-esp-rust.sh", "--build-target all"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install toolchain
        run: |
          ./install-rust-toolchain.sh "${{ matrix.arguments }}"
