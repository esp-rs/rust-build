name: "Build Src"
description: "Build the rustc src"

runs:
  using: "composite"
  steps:
    # Run the Windows Build using powershell

    - name: Prepare build - Windows
      if: startsWith(matrix.os, 'windows')
      working-directory: ${{ env.work_dir }}
      shell: pwsh
      run: python3 src/bootstrap/configure.py ${{ matrix.llvm_root_option }} --experimental-targets=Xtensa --release-channel=nightly --enable-extended --tools=clippy,cargo,rustfmt --dist-compression-formats='xz'

    - name: Dist with x.py - Src - Windows
      if: startsWith(matrix.os, 'windows')
      working-directory: ${{ env.work_dir }}
      shell: pwsh
      run: python3 x.py dist dist rust-src

    # Run Linux builds using bash

    - name: Prepare build - macOS
      if: startsWith(matrix.os, 'macos')
      working-directory: ${{ env.work_dir }}
      shell: bash
      run: python3 src/bootstrap/configure.py ${{ matrix.llvm_root_option }} --experimental-targets=Xtensa --release-channel=nightly --enable-extended --tools=clippy,cargo,rustfmt --dist-compression-formats='xz' --set rust.jemalloc

    - name: Prepare build - Unix
      if: startsWith(matrix.os, 'ubuntu')
      working-directory: ${{ env.work_dir }}
      shell: bash
      run: python3 src/bootstrap/configure.py ${{ matrix.llvm_root_option }} --experimental-targets=Xtensa --release-channel=nightly --enable-extended --tools=clippy,cargo,rustfmt --dist-compression-formats='xz'

    - name: Dist with x.py - Src - Unix
      if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')
      working-directory: ${{ env.work_dir }}
      shell: bash
      run: python3 x.py dist rust-src

    # Save the result

    - name: Save Artifact - Src
      uses: actions/upload-artifact@v2
      with:
        name: rust-src-${{ env.rust_version }}.tar.xz
        path: ${{ env.dist_dir }}/rust-src-${{ env.rust_version }}.tar.xz
