name: "Create Archive"
description: "Create a release archive for upload"

# To avoid disk space issues under github workflow
# we need to split the build into multiple jobs

# running x.py dist during the build generates a .tar.xz file
# (Note cp -r from stage2 is dangerous, because there is a src symlink to parent project dir which causes recursion)
# We take each of these from each build job and combine them into one here

# Typically the final archive with the toolchain and tools should be extracted to
# ~/.rustup/toolchains.

runs:
  using: "composite"
  steps:
    # Read in the built files
    - uses: ./rust-build/.github/actions/util/read-artifacts

    # Create Archive - Windows zip
    - name: Create Archive - Windows (Zip)
      if: startsWith(matrix.os, 'windows')
      shell: bash
      run: |

        mkdir esp

        # Copy in rust-std
        tar -xvf ./rust-std-${{ env.build_suffix }}.tar.xz
        cp -af ./rust-std-${{ env.build_suffix }}/rust-std-${{ matrix.target_name }}/* ./esp/

        # Copy in the clippy tool
        tar -xvf ./clippy-${{ env.build_suffix }}.tar.xz
        cp -af ./clippy-${{ env.build_suffix }}/clippy-preview/* ./esp/

        # Copy in the cargo tool
        tar -xvf ./cargo-${{ env.build_suffix }}.tar.xz
        cp -af ./cargo-${{ env.build_suffix }}/cargo/* ./esp/

        # Copy in the rustfmt tool
        tar -xvf ./rustfmt-${{ env.build_suffix }}.tar.xz
        cp -af ./rustfmt-${{ env.build_suffix }}/rustfmt-preview/* ./esp/

        # Copy in the rust-src content
        tar -xvf ./rust-src-${{ env.rust_version }}-dev.tar.xz
        cp -af ./rust-src-${{ env.rust_version }}-dev/rust-src/* ./esp/

        # Copy in the rustc content
        tar -xvf ./rustc-${{ env.build_suffix }}.tar.xz
        cp -af ./rustc-${{ env.build_suffix }}/rustc/* ./esp/

        # Build the final zip
        7z a ${{ env.asset_name }} esp/

    # Create Archive - Linux tar.xz
    - name: Create Archive - Linux (tar.xz)
      if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |

        mkdir ${{ env.archive_dir }}

        # Copy in rust-std
        tar -xvf ./rust-std-${{ env.build_suffix }}.tar.xz
        cp -af ./rust-std-${{ env.build_suffix }}/* ./${{ env.archive_dir }}/

        # Copy in the clippy tool
        tar -xvf ./clippy-${{ env.build_suffix }}.tar.xz
        cp -af ./clippy-${{ env.build_suffix }}/* ./${{ env.archive_dir }}/

        # Copy in the rustfmt tool
        tar -xvf ./rustfmt-${{ env.build_suffix }}.tar.xz
        cp -af ./rustfmt-${{ env.build_suffix }}/* ./${{ env.archive_dir }}/

        # Copy in the rustc content
        tar -xvf ./rustc-${{ env.build_suffix }}.tar.xz
        cp -af ./rustc-${{ env.build_suffix }}/* ./${{ env.archive_dir }}/

        # At this stage the components file will just contain "rustc"
        # As this is the last one copied in
        # Make sure the other components are recognised by the install script
        echo "rust-std-${{ matrix.target_name }}" >> ./${{ env.archive_dir }}/components
        echo "rustfmt-preview" >> ./${{ env.archive_dir }}/components
        echo "clippy-preview" >> ./${{ env.archive_dir }}/components

        # Build the final tar
        tar -cJf ${{ env.asset_name }} ${{ env.archive_dir }}
